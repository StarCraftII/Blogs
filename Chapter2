1、机器指令

无界贮存机（Unlimited Register Machine,URM）

四种指令：
1.置零指令（Zero）:将贮存器R_i的值r_i置为零；
2.后继指令（Successor）:将贮存器R_i的值r_i增加1；
3.移动指令（Transfer）:将贮存器R_i的值r_i替换为贮存器R_h的值r_h；
4.跳转指令（Jump）:该指令是对指令序列的操作。URM按照顺序执行指令。当执行到跳转指令I_t = J(h,i,j)时，URM根据贮存器R_h
的值r_h与贮存器R_i的值r_i决定下一步指令：如果有r_h = r_i，则跳转到j指令I_j；如果r_h ≠ r_i，则继续执行下一条指令I_(t+1)；

三种函数：
1.置零函数（Zero）: z : x -> 0，URM实现为Z(1)；
2.后继函数（Successor）:s : x -> x + 1，URM实现为S(1)；
3.投影函数（Projection）:u : x = [x_1,x_2,...,x_n] -> x_i，URM实现为T(i,l)；

通过函数去研究指令序列，也就是程序。建立URM指令和函数之间的关系以后，我们可以进一步建立URM程序（指令序列）和其他函数之间的关系
。URM的任意程序P，是按照顺序（或跳转）执行URM的四条指令实现的。

函数的映射，算子（Operator）:替换或复合（Substitution）σ，递归或基本递归（Recursion）ρ，最小化或搜索（Minimization）μ

由z，s，u三个基本函数，经过任意有限次σ，ρ，μ操作，所生成的函数f，都存在一个URM程序P_f可以实现它的计算。

部分递归函数（Partial Recursion Function）

σ算子的复合函数通过栈上的过程调用实现;ρ算子的基础递归可以通过循环实现，也即条件判断与指令跳转，或者通过过程调用;μ算子的搜索可
以通过循环实现。

1.1、指令的硬件资源

Von Neumann 的体系结构中，指令本身被视作特殊的数据，也被储存在内存上。“指令即数据”，程序和代码是被保存在持久性储存设备上
的数据，也仍是以Byte为单位的数据。指令会被加载到物理内存中，被标注为只读数据。

λ演算（λ-Calculus）算是与URM在递归函数上等价的计算模型。

λ表达式的语法如下，假定E是一个λ表达式，Var是无法被继续展开的变量，那么E有三种展开：

E -> Var | (λVar.E) | (EE)

皮亚诺公理（Peano）：1、0是自然数。2、每个自然数都有后继，而且后继也是自然数。

所有Church数是两个参数的函数;
为Church数，它被暗示：
	f - 是“后继”函数（它基本上是递增即函数，它接受一个标号并返回标记下一个）;
	x - 是代表“零”的（数字）值（计数起始点）;
0 = λf.(λx.x) , 使用后继函数0次
1 = λf.(λx.f(x)) , 使用后继函数1次
2 = λf.(λx.f(f(x))) , 使用后继函数2次

中央处理器（Central Processing Unit,CPU）包含了寄存器组，程序计数器，以及条件码。寄存器组一般包括通用寄存器（Register）,用于
：保存返回值（Return Value），保存过程调用的参数（Argument）,描述过程调用的帧（Frame）、栈（Stack）结构。

%rax寄存器：保存程序（指令序列）运行结果的寄存器。

%rsi，%rdi寄存器：保存参数的寄存器。

%rip，%eip寄存器：存放指令的虚拟地址。

为了实现条件分支和 rip 跳转，CPU维护一组标志寄存器（Flags）或条件码（Conditional Codes），用来记录上一条指令计算机结果的信
息。

假定源操作数为 src，目的操作数为 dst ，运算的结果为 val：
      CF：将指令视为对无符号整数的运算，判断运算是否发生无符号整数的溢出，也即最高位方式进位（Carry）。对无符号加法，即
             CF = (dst + src < dst)，对于无符号减法，即 CF = (dst - src > dst)
      ZF：判断指令运算的结果是否为0，即 ZF = (val == 0)
      SF：判断运算结果的最高位是否为1，也即将结果视作有符号数，判断是否为负数，即SF = (val >> 63)
      0F：视作有符号数的运算，判断是否发生正数或负数的溢出。取三个数的符号位 sign_src，sign_dst，sign_val，对于有符号加法，即
             0F = (!(sign_dst ^ sign_src) && (sign_src ^ sign_val))，对于有符号减法，即 0F =((sign_dst ^ sign_src) && !(sign_src ^ sign_val))

动态随机访问内存（Dynamic Random Access Memory,DRAM）实现的物料内存（Physical Memory）。物料内存可以看作一个巨大的
Byte数组。物料内存的大小是有限的，而虚拟地址的寻址范围远要比物料内存更宽泛，我们会进行地址翻译。

CPU的指令周期（Instruction Cycle）
